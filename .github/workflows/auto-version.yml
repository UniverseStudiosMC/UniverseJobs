name: Auto Version Bump and Release

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'pom.xml'
      - '.github/workflows/auto-version.yml'

jobs:
  version-bump-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT || github.token }}
          persist-credentials: true
          
      - name: Get current version
        id: get_version
        run: |
          CURRENT_VERSION=$(grep -m1 '<version>' pom.xml | sed 's/.*<version>\(.*\)<\/version>.*/\1/')
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"
          
      - name: Calculate next version
        id: next_version
        run: |
          CURRENT_VERSION=${{ steps.get_version.outputs.CURRENT_VERSION }}
          # Split version into major.minor.patch
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          # Increment patch version
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"
          
      - name: Update version in pom.xml
        run: |
          sed -i "s/<version>${{ steps.get_version.outputs.CURRENT_VERSION }}<\/version>/<version>${{ steps.next_version.outputs.NEW_VERSION }}<\/version>/g" pom.xml
        
      - name: Commit version bump
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add pom.xml
          git commit -m "chore: bump version to ${{ steps.next_version.outputs.NEW_VERSION }} [skip ci]"
          
      - name: Push changes
        run: git push
        
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          
      - name: Create Maven settings.xml with retry config
        run: |
          mkdir -p ~/.m2
          cat > ~/.m2/settings.xml << 'EOF'
          <settings>
            <servers />
            <profiles>
              <profile>
                <id>retry-profile</id>
                <properties>
                  <maven.wagon.http.retryHandler.count>3</maven.wagon.http.retryHandler.count>
                  <maven.wagon.httpconnectionManager.ttlSeconds>60</maven.wagon.httpconnectionManager.ttlSeconds>
                </properties>
              </profile>
            </profiles>
            <activeProfiles>
              <activeProfile>retry-profile</activeProfile>
            </activeProfiles>
          </settings>
          EOF
          
      - name: Build with Maven
        run: |
          mvn clean package -DskipTests -Dmaven.wagon.http.retryHandler.count=3 || \
          mvn clean package -DskipTests -Dmaven.test.skip=true || \
          echo "Build failed but continuing..."
        continue-on-error: true
        
      - name: Check if JAR was built
        id: check_jar
        run: |
          if [ -f "target/JobsAdventure-${{ steps.next_version.outputs.NEW_VERSION }}.jar" ]; then
            echo "JAR_EXISTS=true" >> $GITHUB_OUTPUT
            echo "JAR file found!"
          else
            echo "JAR_EXISTS=false" >> $GITHUB_OUTPUT
            echo "JAR file not found, build may have failed"
          fi
          
      - name: Get commit info
        id: commit_info
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B | head -1)
          COMMIT_SHA=$(git rev-parse HEAD)
          echo "COMMIT_MSG=$COMMIT_MSG" >> $GITHUB_OUTPUT
          echo "COMMIT_SHA=$COMMIT_SHA" >> $GITHUB_OUTPUT
          
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.next_version.outputs.NEW_VERSION }}
          release_name: JobsAdventure v${{ steps.next_version.outputs.NEW_VERSION }}
          body: |
            ## üì¶ JobsAdventure v${{ steps.next_version.outputs.NEW_VERSION }}
            
            ### üìù Commit
            - Message: ${{ steps.commit_info.outputs.COMMIT_MSG }}
            - SHA: ${{ steps.commit_info.outputs.COMMIT_SHA }}
            
            ### ‚öôÔ∏è Build Status
            - JAR Available: ${{ steps.check_jar.outputs.JAR_EXISTS == 'true' && '‚úÖ Yes' || '‚ùå No (Build failed)' }}
            
            ### üì• Download
            ${{ steps.check_jar.outputs.JAR_EXISTS == 'true' && 'Download the JAR file below to install this version.' || '‚ö†Ô∏è Build failed due to dependency issues. Please build locally.' }}
          draft: false
          prerelease: false
          
      - name: Upload JAR to Release
        if: steps.check_jar.outputs.JAR_EXISTS == 'true'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./target/JobsAdventure-${{ steps.next_version.outputs.NEW_VERSION }}.jar
          asset_name: JobsAdventure-${{ steps.next_version.outputs.NEW_VERSION }}.jar
          asset_content_type: application/java-archive